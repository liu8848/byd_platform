<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.platform.mapper.AuditorMapper">
    <resultMap id="auditor" type="com.platform.entity.Auditor">
        <id column="id" property="id"/>
        <result column="employee_id" property="employeeId"/>
        <result column="record_factory_id" property="recordFactoryId"/>
        <result column="education" property="education"/>
        <result column="auditor_level" property="auditorLevel"/>
        <result column="phone" property="phone"/>
        <result column="registration_number" property="registrationNumber"/>
        <result column="type" property="type"/>
        <association property="employee" javaType="com.platform.entity.Employee">
            <id column="e_id" property="id"/>
            <result column="name" property="name"/>
            <result column="grade" property="grade"/>
            <result column="gender" property="gender"/>
            <result column="education" property="education"/>
            <result column="email" property="email"/>
            <result column="phone" property="phone"/>
            <result column="factory_id" property="factoryId"/>
            <result column="department_id" property="departmentId"/>
            <result column="location_id" property="locationId"/>
            <result column="status" property="status"/>
            <association property="department" javaType="com.platform.entity.Department">
                <id column="d_id" property="id"/>
                <result column="d_name" property="name"/>
                <association property="factory" javaType="com.platform.entity.Factory">
                    <id column="f_id" property="id"/>
                    <result column="f_name" property="name"/>
                    <result column="f_level" property="level"/>
                    <association property="bu" javaType="com.platform.entity.BusinessDivision">
                        <id column="bu_id" property="buId"/>
                        <result column="bu_name" property="buName"/>
                    </association>
                </association>
            </association>
        </association>
        <collection property="technologyList" ofType="com.platform.vo.ProfessionInspectionVO">
            <id column="inspection_id" property="id"/>
            <result column="inspection_name" property="name"/>
        </collection>
    </resultMap>

    <resultMap id="auditorStandingBookInWork" type="com.platform.entity.AuditorStandingBookInWork">
        <id column="id" property="id"/>
        <result property="buId" column="bu_id"/>
        <result property="recordFactoryId" column="record_factory_id"/>
        <result property="levelMatch" column="level_match"/>
        <result property="level" column="level"/>
        <result property="sa" column="sa"/>
        <result property="a" column="a"/>
        <result property="pa" column="pa"/>
        <result property="warnTime" column="warn_time"/>
        <collection property="auditors" javaType="ArrayList" column="record_factory_id"
                    ofType="com.platform.vo.AuditorDisplayVO" select="getAuditorDisplayVO"/>
    </resultMap>


    <select id="countAuditorById">
        select count(employee_id)
        from auditor
        where employee_id = #{employeeId}
    </select>

    <select id="getAuditor" resultType="com.platform.entity.Auditor">
        select auditor.*,
               e.id            `employee.id`,
               e.name          `employee.name`,
               e.grade         `employee.grade`,
               e.gender        `employee.gender`,
               e.email         `employee.email`,
               e.phone         `employee.phone`,
               e.factory_id    `employee.factoryId`,
               e.department_id `employee.departmentId`,
               e.location_id   `employee.locationId`,
               e.status        `employee.status`
        from auditor
                 left join employee e on auditor.employee_id = e.id
        where e.status = 1
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into auditor(employee_id, record_factory_id, education, auditor_level, phone, registration_number,
                            technology, create_user, create_time)
        VALUES (#{employeeId}, #{recordFactoryId}, #{education}, #{auditorLevel}, #{phone}, #{registrationNumber},
                #{technology}, #{createUser}, #{createTime})
    </insert>

    <delete id="deleteAuditorInspectionByEmployeeId">
        delete
        from auditor_inspection
        where employee_id = #{employeeId}
    </delete>

    <insert id="insertAuditorInspection" useGeneratedKeys="true">
        insert into auditor_inspection(employee_id, inspection_id)
        value
        <foreach collection="inspectionList" item="inspection" separator=",">
            (#{inspection.employeeId},#{inspection.inspectionId})
        </foreach>
    </insert>

    <select id="getStandingBookInWorkByRecordFactoryId" resultType="com.platform.entity.AuditorStandingBookInWork">
        select *
        from auditor_standing_book_in_work asbiw
        where record_factory_id = #{recordFactoryId}
    </select>

    <select id="getAuditorByRecordFactoryId" resultMap="auditor">
        select a.*,
               e.*,
               d.id    d_id,
               d.name  d_name,
               f.id    f_id,
               f.name  f_name,
               f.level f_level,
               bu.bu_id,
               bu.bu_name,
               inspection_id,
               pi.name inspection_name,
               e.status
        from auditor a
                 left join employee e on a.employee_id = e.id
                 left join department d on e.department_id = d.id
                 left join factory f on d.factory_id = f.id
                 left join BusinessDivision bu on bu.bu_id = f.bu_id
                 left join auditor_inspection ai on a.employee_id = ai.employee_id
                 left join ProfessionInspection pi on pi.id = ai.inspection_id
                 left join location l on e.location_id = l.id
        where a.record_factory_id = #{recordFactoryId}
    </select>

    <insert id="insertAuditorStandingBook" parameterType="com.platform.entity.AuditorStandingBookInWork"
            useGeneratedKeys="true" keyProperty="id">
        insert into auditor_standing_book_in_work(bu_id, record_factory_id, level_match, level, sa, a, pa, warn_time)
        VALUES (#{buId}, #{recordFactoryId}, #{levelMatch}, #{level}, #{sa}, #{a}, #{pa}, #{warnTime})
    </insert>

    <update id="updateAuditorStandingBook">
        update auditor_standing_book_in_work
        <set>
            <if test="levelMatch!=null">
                level_match=#{levelMatch},
            </if>
            <if test="sa!=null">
                sa=#{sa},
            </if>
            <if test="pa!=null">
                pa=#{pa},
            </if>
            <if test="a!=null">
                a=#{a},
            </if>
            <if test="level!=null">
                level=#{level},
            </if>
            <if test="warnTime!=null">
                warn_time=#{warnTime},
            </if>
        </set>
        where id=#{id}
    </update>


    <select id="getStandingBookInWork" resultType="com.platform.entity.AuditorStandingBookInWork">
        select *
        from auditor_standing_book_in_work
    </select>

    <select id="getAuditorDisplayVO" resultType="com.platform.vo.AuditorDisplayVO">
        select e.factory_id,
               e.department_id,
               e.name employee_name,
               a.employee_id,
               e.grade,
               e.gender,
               e.education,
               a.auditor_level,
               e.email,
               e.phone,
               a.registration_number,
               e.location_id
        from auditor a
                 left join employee e on a.employee_id = e.id
        where a.record_factory_id = #{record_factory_id}
    </select>

    <select id="getPageQueryStandingBookInWork" resultType="com.platform.entity.AuditorStandingBookInWork">
        select *
        from auditor_standing_book_in_work asbiw
        <where>
            <if test="levelMatch!=null">and level_match=#{levelMatch}</if>
            <if test="level!=null">and level=#{level}</if>
            <if test="buId!=null">and bu_id=#{buId}</if>
            <if test="recordFactoryId!=null">and record_factory_id=#{recordFactoryId}</if>
        </where>
    </select>

    <select id="getAuditorByEmployeeId" resultType="com.platform.entity.Auditor">
        select auditor.*,
               e.id            `employee.id`,
               e.name          `employee.name`,
               e.grade         `employee.grade`,
               e.gender        `employee.gender`,
               e.email         `employee.email`,
               e.phone         `employee.phone`,
               e.factory_id    `employee.factoryId`,
               e.department_id `employee.departmentId`,
               e.location_id   `employee.locationId`
        from auditor
                 left join employee e on auditor.employee_id = e.id
        where auditor.employee_id = #{employeeId}
    </select>

    <delete id="deleteAuditorByEmployeeId">
        delete
        from auditor
        where employee_id = #{employeeId}
    </delete>

    <update id="updateAuditorArrangement">
        update auditor
        set arrangement=#{isArrange}
        where employee_id = #{employeeId}
    </update>

    <insert id="importAuditors" keyProperty="id" useGeneratedKeys="true">
        insert into auditor(employee_id, record_factory_id, education, auditor_level, phone, registration_number, technology, create_user, create_time, update_user, update_time)
        VALUES
        <foreach collection="auditors" item="auditor" separator=",">
            (#{employeeId},#{recordFactoryId},#{education},#{auditorLevel},#{phone},#{registrationNumber},#{technology},#{createUser},#{createTime},#{updateUser},#{updateTime})
        </foreach>

    </insert>
</mapper>